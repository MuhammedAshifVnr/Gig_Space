// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/block/{userID}": {
            "post": {
                "description": "This endpoint blocks a user by their user ID. The userID is retrieved from the URL path and must be a valid integer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Block a user by userID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/admin/category": {
            "get": {
                "description": "Retrieves a list of all categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all categories",
                "responses": {}
            },
            "post": {
                "description": "Allows admin to add a new category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Add a new category",
                "parameters": [
                    {
                        "description": "Category Name",
                        "name": "category_name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/helper.AddCategory"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/admin/category/{CatID}": {
            "delete": {
                "description": "Deletes a category by ID, used by admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Admin delete skill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "CatID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/admin/create-plan": {
            "post": {
                "description": "This endpoint allows you to create a new payment plan by providing a name, price, and period.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Create a new payment plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the plan",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Price of the plan in cents",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "monthly",
                            "yearly"
                        ],
                        "type": "string",
                        "description": "Period of the plan",
                        "name": "period",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/admin/login": {
            "post": {
                "description": "Log in as an admin using email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/helper.ADLogin"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/admin/logout": {
            "post": {
                "description": "Clears the authentication cookie and logs the user out",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Logs out the user",
                "responses": {}
            }
        },
        "/admin/orders/complet/{OrderID}": {
            "post": {
                "description": "Initiates a complet for a specified order by its OrderID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GetAllComplet"
                ],
                "summary": "Process a complet for an order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the order to be completed",
                        "name": "OrderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/admin/orders/completed": {
            "get": {
                "description": "Retrieves a list of all complet orders in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GetAllCompleted"
                ],
                "summary": "Get all complet orders",
                "responses": {}
            }
        },
        "/admin/orders/refund": {
            "get": {
                "description": "Retrieves a list of all refund orders in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GetAllRefund"
                ],
                "summary": "Get all refund orders",
                "responses": {}
            }
        },
        "/admin/orders/refund/{OrderID}": {
            "post": {
                "description": "Initiates a refund for a specified order by its OrderID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GetAllRefund"
                ],
                "summary": "Process a refund for an order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the order to be refunded",
                        "name": "OrderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/admin/plan/{PlanID}": {
            "delete": {
                "description": "This endpoint deletes a payment plan based on the provided PlanID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Delete a payment plan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the plan to delete",
                        "name": "PlanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/admin/plans": {
            "get": {
                "description": "This endpoint retrieves a list of all available payment plans.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Get all payment plans",
                "responses": {}
            }
        },
        "/admin/skill": {
            "post": {
                "description": "This endpoint allows a admin to add a new skill by providing the skill name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Add a new skill to a user's profile",
                "parameters": [
                    {
                        "description": "Skill information",
                        "name": "skill",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/helper.AddSkill"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/admin/skills": {
            "get": {
                "description": "Retrieves a list of all skills",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all skills",
                "responses": {}
            }
        },
        "/admin/skills/{skillID}": {
            "delete": {
                "description": "Deletes a skill by ID, used by admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Admin delete skill",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Skill ID",
                        "name": "skillID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/admin/users": {
            "get": {
                "description": "Retrieve a list of all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all users",
                "responses": {}
            }
        },
        "/chat/messages/{receiverID}": {
            "get": {
                "description": "Retrieve the chat history between the current authenticated user and a specified recipient.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Get Chat Messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Recipient User ID",
                        "name": "receiverID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/add": {
            "post": {
                "description": "This endpoint creates a new gig with a title, description, price, and images. Images are uploaded via multipart form.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gigs"
                ],
                "summary": "Create a new gig",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Title of the gig",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the gig",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Category of the gig",
                        "name": "category",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Number of delivery days",
                        "name": "delivery",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of revisions",
                        "name": "revisions",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Price of the gig",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "Images for the gig (can upload multiple images)",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/client/all": {
            "get": {
                "description": "Retrieve all gigs excluding the specified user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gigs"
                ],
                "summary": "Get All Gigs",
                "responses": {}
            }
        },
        "/gig/client/{gig_id}": {
            "get": {
                "description": "Retrieve a specific gig by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gigs"
                ],
                "summary": "Get Gig by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gig ID",
                        "name": "gig_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/custom": {
            "post": {
                "description": "This endpoint allows freelancers to create a custom gig based on a client's request.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Custom Gig"
                ],
                "summary": "Create a custom gig",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gig Request ID",
                        "name": "gig_request_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gig Title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gig Description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Gig Price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Delivery Days",
                        "name": "delivery_days",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/offers": {
            "get": {
                "description": "This endpoint fetches all offers sent to the authenticated client.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Custom Gig"
                ],
                "summary": "Get all offers for a client",
                "responses": {}
            }
        },
        "/gig/offers/{GigID}/": {
            "post": {
                "description": "Creates an order for a gig offer using the provided GigID and user ID from context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create an Offer Order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gig ID",
                        "name": "GigID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/order/{GigID}": {
            "post": {
                "description": "Creates a new order for a specified gig using the gig ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create an order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gig ID",
                        "name": "GigID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/orders/freelancer": {
            "get": {
                "description": "Retrieve all orders associated with the authenticated freelancer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get all orders for a freelancer",
                "responses": {}
            }
        },
        "/gig/orders/{order_id}": {
            "get": {
                "description": "Retrieve details of a specific order using its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/orders/{order_id}/done": {
            "put": {
                "description": "Update the status of a specific order by the client",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/orders/{order_id}/pending": {
            "put": {
                "description": "Update the status of a specific order by the client",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/quotes": {
            "get": {
                "description": "This endpoint fetches all quotes for the authenticated user, either as a client or as a freelancer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quotes"
                ],
                "summary": "Get all quotes for a user",
                "responses": {}
            }
        },
        "/gig/quotes/{GigID}": {
            "post": {
                "description": "Allows a client to create a quote for a specific gig by providing necessary details like price, message, and delivery days.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quotes"
                ],
                "summary": "Create a quote for a Gig",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gig ID",
                        "name": "GigID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description or message for the quote",
                        "name": "Message",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Price offered by the client",
                        "name": "Price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Delivery days requested by the client",
                        "name": "DeliveryDays",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/requests": {
            "get": {
                "description": "Retrieve all requests for orders associated with the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Request"
                ],
                "summary": "Get all order requests",
                "responses": {}
            }
        },
        "/gig/user": {
            "get": {
                "description": "Get all gigs created by the logged-in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gigs"
                ],
                "summary": "Get Gigs by User ID",
                "responses": {}
            }
        },
        "/gig/{GigID}": {
            "delete": {
                "description": "Deletes a gig by its ID, ensuring the user is authorized to delete the gig.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gigs"
                ],
                "summary": "Delete an existing gig",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gig ID",
                        "name": "GigID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/{id}": {
            "put": {
                "description": "Updates the details of an existing gig by ID, including title, description, category, delivery days, revisions, price, and images.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gigs"
                ],
                "summary": "Update an existing gig",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gig ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Title of the gig",
                        "name": "title",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Description of the gig",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Category of the gig",
                        "name": "category",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Delivery days",
                        "name": "delivery",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Number of revisions",
                        "name": "revisions",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Price of the gig",
                        "name": "price",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Images for the gig (multiple files allowed)",
                        "name": "images",
                        "in": "formData"
                    }
                ],
                "responses": {}
            }
        },
        "/gig/{order_id}/accept": {
            "post": {
                "description": "Accepts an order by updating its status to \"Accepted\" in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Request"
                ],
                "summary": "Accept an order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/gig/{order_id}/reject": {
            "post": {
                "description": "Reject an order by updating its status to \"Reject\" in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Request"
                ],
                "summary": "Reject an order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/payments/bank": {
            "post": {
                "description": "Adds a bank account for the user, ensuring account numbers match and valid IFSC is provided",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Add Bank Account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account Number",
                        "name": "Account1",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Confirm Account Number",
                        "name": "Account2",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "IFSC Code",
                        "name": "IFSC",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Beneficiary Name",
                        "name": "Name",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/payments/subscription-renew/{PlanID}": {
            "post": {
                "description": "This endpoint renews the subscription for a given user and plan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "Renew user subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Plan ID",
                        "name": "PlanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/payments/subscription/{PlanID}": {
            "post": {
                "description": "Create a subscription payment for a user based on the selected plan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payments"
                ],
                "summary": "Create Subscription Payment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Plan ID",
                        "name": "PlanID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML rendered with subscription details",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/payments/wallet": {
            "post": {
                "description": "Retrieve the wallet balance by providing the correct PIN for security",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get Wallet Information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's wallet PIN",
                        "name": "Pin",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/payments/wallet/change-pin": {
            "post": {
                "description": "Allows the user to change their wallet PIN by providing the current PIN and a new PIN.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Change Wallet PIN",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Current PIN",
                        "name": "current_pin",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "New PIN",
                        "name": "new_pin1",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Confirm New PIN",
                        "name": "new_pin2",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/payments/wallet/create": {
            "post": {
                "description": "This endpoint allows users to create a wallet with a secure PIN.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Create a new wallet for the user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "4-digit secure PIN",
                        "name": "Pin",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Repeat PIN to confirm",
                        "name": "RePin",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/payments/wallet/forgot-pin": {
            "post": {
                "description": "Generates and sends an OTP to the user's registered email to reset their wallet PIN.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Request OTP for resetting wallet PIN",
                "responses": {}
            }
        },
        "/payments/wallet/reset-pin": {
            "post": {
                "description": "Resets the wallet PIN for the user after OTP verification",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Reset Wallet PIN",
                "parameters": [
                    {
                        "type": "string",
                        "description": "One-Time Password (OTP)",
                        "name": "OTP",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "New PIN",
                        "name": "new_pin1",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Confirm New PIN",
                        "name": "new_pin2",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/payments/withdrawal": {
            "post": {
                "description": "This endpoint allows the user to withdraw a specific amount from their wallet by providing a valid PIN.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Withdraw amount from user's wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PIN for wallet withdrawal",
                        "name": "Pin",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Amount to withdraw",
                        "name": "Amount",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/search/gigs": {
            "get": {
                "description": "This endpoint allows searching for gigs based on a query string, price range, revisions, and delivery days.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search gigs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query to match title, description, or category",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum price filter",
                        "name": "price_upto",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum number of revisions filter",
                        "name": "revisions_min",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum delivery days filter",
                        "name": "delivery_days",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/user/address": {
            "post": {
                "description": "Update the user's address (city, district, state)",
                "tags": [
                    "User"
                ],
                "summary": "Update user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City",
                        "name": "city",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "District",
                        "name": "district",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "State",
                        "name": "state",
                        "in": "formData"
                    }
                ],
                "responses": {}
            }
        },
        "/user/forgot-password": {
            "post": {
                "description": "Sends a forgot password request to the user's email address. The user will receive an OTP to reset the password.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Forgot Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/helper.LoginData"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/user/logout": {
            "post": {
                "description": "Clears the authentication cookie and logs the user out",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Logs out the user",
                "responses": {}
            }
        },
        "/user/profile": {
            "get": {
                "description": "Retrieves the profile details of the user based on their user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user profile",
                "responses": {}
            },
            "put": {
                "description": "Update the user's bio and title in their profile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User bio",
                        "name": "Bio",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User title",
                        "name": "Title",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/profile-photo": {
            "post": {
                "description": "Uploads a profile photo for the user based on the userID.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Uploads a profile photo for the user",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Profile photo",
                        "name": "photo",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/reset-password": {
            "post": {
                "description": "Allows the user to reset their password using the OTP and new password values.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OTP sent to user email",
                        "name": "otp",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New password",
                        "name": "pwd1",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Confirm new password",
                        "name": "pwd2",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/role": {
            "put": {
                "description": "Updates the role of the user based on the user ID in the request context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Change the role of a user",
                "responses": {}
            }
        },
        "/user/signup": {
            "post": {
                "description": "Create a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Sign up a new user",
                "parameters": [
                    {
                        "description": "Signup Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/helper.SignupData"
                        }
                    },
                    {
                        "enum": [
                            "freelancer",
                            "client"
                        ],
                        "type": "string",
                        "description": "User role",
                        "name": "role",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/skill/{Skill}": {
            "delete": {
                "description": "Deletes a specific skill for a user based on the user ID and skill ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete a skill from a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Skill ID to delete",
                        "name": "Skill",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/skills": {
            "post": {
                "description": "This endpoint allows a freelancer to add a skill and set their proficiency level.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Add freelancer skill",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Skill name",
                        "name": "skillName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Proficiency level",
                        "name": "proficency",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "helper.ADLogin": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "helper.AddCategory": {
            "type": "object",
            "properties": {
                "category_name": {
                    "type": "string"
                }
            }
        },
        "helper.AddSkill": {
            "type": "object",
            "properties": {
                "skill_name": {
                    "type": "string"
                }
            }
        },
        "helper.LoginData": {
            "type": "object",
            "required": [
                "useremail",
                "userpassword"
            ],
            "properties": {
                "useremail": {
                    "type": "string"
                },
                "userpassword": {
                    "type": "string",
                    "minLength": 4
                }
            }
        },
        "helper.SignupData": {
            "type": "object",
            "required": [
                "country",
                "firstname",
                "lastname",
                "phone",
                "useremail",
                "userpassword"
            ],
            "properties": {
                "country": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 4
                },
                "lastname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 4
                },
                "phone": {
                    "type": "string"
                },
                "useremail": {
                    "type": "string"
                },
                "userpassword": {
                    "type": "string",
                    "minLength": 6
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "API Gateway Swagger",
	Description:      "This is the API Gateway for the Flexi Worke project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
